---
- name: Enable ports on firewall
  block:
  - name: Enable cluster management communication TCP port
    firewalld:
      port: "{{ docker_swarm_port }}/tcp"
      permanent: yes
      state: enabled
  - name: Enable node communication TCP port
    firewalld:
      port: 7946/tcp
      permanent: yes
      state: enabled
  - name: Enable node communication UDP port
    firewalld:
      port: 7946/udp
      permanent: yes
      state: enabled
  - name: Enable overlay network UDP port
    firewalld:
      port: 4789/udp
      permanent: yes
      state: enabled
  - name: Reload firewalld with new rules
    command: firewall-cmd --reload

- name: Enable Docker swarm mode
  docker_swarm:
    state: present
    advertise_addr: "{{ hostvars[inventory_hostname]['ansible_' + docker_swarm_interface]['ipv4']['address'] }}"
  when: "inventory_hostname == groups['swarm_manager'][0]"
  register: swarm_info

- name: Declare facts of first manager
  set_fact:
    manager_token: "{{ swarm_info.swarm_facts.JoinTokens.Manager }}"
    worker_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
    docker_manager_address: "{{ hostvars[inventory_hostname]['ansible_' + docker_swarm_interface]['ipv4']['address'] }}:{{ docker_swarm_port }}"
  tags:
    - swarm-join
  when: "inventory_hostname == groups['swarm_manager'][0]"

- name: Distribute the facts
  set_fact:
    manager_token: "{{ hostvars[groups['swarm_manager'][0]]['manager_token'] }}"
    worker_token: "{{ hostvars[groups['swarm_manager'][0]]['worker_token'] }}"
    manager_address: "{{ hostvars[groups['swarm_manager'][0]]['docker_manager_address'] }}"
  tags:
    - swarm-join
  when: "inventory_hostname != groups['swarm_manager'][0]"

- name: Enable node as Worker
  docker_swarm:
    state: join
    join_token: "{{ worker_token }}"
    advertise_addr: "{{ hostvars[inventory_hostname]['ansible_' + docker_swarm_interface]['ipv4']['address'] }}"
    remote_addrs:
     - "{{ manager_address }}"
  tags:
    - swarm-join
  when: "inventory_hostname != groups['swarm_manager'][0]"

- name: Create a Docker Swarm network
  docker_network:
    name: "{{ item.name }}"
    driver: overlay
    driver_options:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.name: "{{ item.name }}"
      com.docker.network.enable_ipv6: "true"
    ipam_config:
      - subnet: "{{ item.network }}"
        gateway: "{{ item.network | ipaddr('net') | ipaddr('1') }}"
  with_items: "{{ docker_networks }}"
  tags:
    - docker-network
  when: docker_networks is defined and inventory_hostname == groups['swarm_manager'][0]